version: 2.1

executors:
  linux-self-hosted:
    machine:
      enabled: true
      resource_class: virus/windows

jobs:
  build:
    executor: linux-self-hosted
    steps:
      - checkout
      - run:
          name: Build Docker Image
          command: |
            docker build -t $ECR_REPOSITORY:latest .

  push-to-ecr:
    executor: linux-self-hosted
    steps:
      - checkout
      - run:
          name: Authenticate with ECR
          command: |
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
      - run:
          name: Build, Tag, and Push Docker Image to ECR
          command: |
            IMAGE_TAG="v1.0.${CIRCLE_BUILD_NUM}"
            echo "export IMAGE_TAG=$IMAGE_TAG" >> $BASH_ENV
            docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
            docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy-to-eks:
    executor: linux-self-hosted
    steps:
      - checkout

      - run:
          name: Install kubectl and aws-iam-authenticator if not available
          shell: /bin/bash -leo pipefail
          command: |
            if ! command -v kubectl &> /dev/null; then
              echo "Installing kubectl..."
              VERSION=$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)
              curl -LO "https://dl.k8s.io/release/${VERSION}/bin/linux/amd64/kubectl"
              chmod +x kubectl
              mkdir -p $HOME/bin
              mv kubectl $HOME/bin/
              echo 'export PATH=$HOME/bin:$PATH' >> $BASH_ENV
            fi

            if ! command -v aws-iam-authenticator &> /dev/null; then
              echo "Installing aws-iam-authenticator..."
              curl -Lo aws-iam-authenticator https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/download/v0.5.9/aws-iam-authenticator_0.5.9_linux_amd64
              chmod +x ./aws-iam-authenticator
              mkdir -p $HOME/bin
              mv ./aws-iam-authenticator $HOME/bin/
              echo 'export PATH=$HOME/bin:$PATH' >> $BASH_ENV
            fi

      - run:
          name: Load env + Set up kubeconfig with IAM role
          shell: /bin/bash -leo pipefail
          command: |
            source $BASH_ENV
            echo "Verifying AWS credentials..."
            aws sts get-caller-identity

            echo "Updating kubeconfig for EKS cluster: $EKS_CLUSTER_NAME"
            if [ ! -z "$AWS_ROLE_ARN" ]; then
              aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER_NAME --role-arn $AWS_ROLE_ARN
            else
              aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER_NAME
            fi

            echo "Verifying kubectl config..."
            kubectl config view
            kubectl cluster-info
            kubectl config get-contexts

      - run:
          name: Export IMAGE_TAG for deployment
          command: |
            IMAGE_TAG="v1.0.${CIRCLE_BUILD_NUM}"
            echo "export IMAGE_TAG=$IMAGE_TAG" >> $BASH_ENV

      - run:
          name: Debug file paths
          shell: /bin/bash -leo pipefail
          command: |
            source $BASH_ENV
            echo "Current working directory: $(pwd)"
            echo "Listing files:"
            ls -la
            find . -name "deployment.yaml" -o -name "service.yaml"

      - run:
          name: Deploy to EKS
          shell: /bin/bash -leo pipefail
          command: |
            source $BASH_ENV
            DEPLOY_FILE=$(find . -name "deployment.yaml" | head -1)
            SERVICE_FILE=$(find . -name "service.yaml" | head -1)

            if [ -z "$DEPLOY_FILE" ]; then
              echo "ERROR: deployment.yaml not found"
              exit 1
            fi
            if [ -z "$SERVICE_FILE" ]; then
              echo "ERROR: service.yaml not found"
              exit 1
            fi

            echo "Using deployment file: $DEPLOY_FILE"
            echo "Using service file: $SERVICE_FILE"

            cat "$DEPLOY_FILE" | sed "s|\${IMAGE_TAG}|$IMAGE_TAG|g" > deployment_with_tag.yaml

            echo "Testing Kubernetes authentication..."
            if ! kubectl auth can-i get deployments --namespace=default; then
              echo "ERROR: Kubernetes authentication failed"
              echo "Attempting to use aws-iam-authenticator token..."
              aws-iam-authenticator token -i $EKS_CLUSTER_NAME --region $AWS_REGION || {
                echo "aws-iam-authenticator fallback failed"
                exit 1
              }
            fi

            echo "Deploying resources..."
            kubectl apply -f deployment_with_tag.yaml --v=5
            kubectl apply -f "$SERVICE_FILE" --v=5

workflows:
  version: 2
  deploy-pipeline:
    jobs:
      - build
      - push-to-ecr:
          requires:
            - build
      - deploy-to-eks:
          requires:
            - push-to-ecr

# version: 2.1

# executors:
#   linux-self-hosted:
#     machine:
#       enabled: true
#     resource_class: virus/windows

# jobs:
#   build:
#     executor: linux-self-hosted
#     steps:
#       - checkout
#       - run:
#           name: Build Docker Image
#           command: |
#             docker build -t $ECR_REPOSITORY:latest .

#   push-to-ecr:
#     executor: linux-self-hosted
#     steps:
#       - checkout
#       - run:
#           name: Authenticate with ECR
#           command: |
#             aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
#       - run:
#           name: Build, Tag, and Push Docker Image to ECR
#           command: |
#             IMAGE_TAG="v1.0.${CIRCLE_BUILD_NUM}"
#             echo "export IMAGE_TAG=$IMAGE_TAG" >> $BASH_ENV
#             docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
#             docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#             docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

#   deploy-to-eks:
#     executor: linux-self-hosted
#     steps:
#       - checkout
#       - run:
#           name: Install kubectl if not available
#           command: |
#             if ! command -v kubectl &> /dev/null; then
#               echo "Installing kubectl..."
#               VERSION=$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)
#               curl -LO https://dl.k8s.io/release/${VERSION}/bin/linux/amd64/kubectl
#               chmod +x kubectl
#               mkdir -p $HOME/bin
#               mv kubectl $HOME/bin/kubectl
#               echo 'export PATH=$HOME/bin:$PATH' >> $BASH_ENV
#             else
#               echo "kubectl already installed"
#             fi
#       - run:
#           name: Load env + Set up kubeconfig with proper IAM credentials
#           shell: /bin/bash -leo pipefail
#           command: |
#             if [ -f "$BASH_ENV" ]; then
#               source $BASH_ENV
#             fi
            
#             # Make sure AWS credentials are properly set
#             echo "Verifying AWS credentials..."
#             aws sts get-caller-identity
            
#             # Install aws-iam-authenticator if needed
#             if ! command -v aws-iam-authenticator &> /dev/null; then
#               echo "Installing aws-iam-authenticator..."
#               curl -Lo aws-iam-authenticator https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/download/v0.5.9/aws-iam-authenticator_0.5.9_linux_amd64
#               chmod +x ./aws-iam-authenticator
#               mkdir -p $HOME/bin
#               mv ./aws-iam-authenticator $HOME/bin/
#               export PATH=$HOME/bin:$PATH
#               echo 'export PATH=$HOME/bin:$PATH' >> $BASH_ENV
#             fi
            
#             # Update kubeconfig with explicit role assumption if needed
#             echo "Updating kubeconfig for EKS cluster: $EKS_CLUSTER_NAME"
#             if [ ! -z "$AWS_ROLE_ARN" ]; then
#               aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER_NAME --role-arn $AWS_ROLE_ARN
#             else
#               aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER_NAME
#             fi
            
#             # Verify kubeconfig is working and print detailed info
#             echo "Verifying kubectl configuration..."
#             kubectl config view
#             echo "Testing cluster connection..."
#             kubectl cluster-info
#             echo "Checking auth contexts..."
#             kubectl config get-contexts
      
#       - run:
#           name: Export IMAGE_TAG for deployment
#           command: |
#             IMAGE_TAG="v1.0.${CIRCLE_BUILD_NUM}"
#             echo "export IMAGE_TAG=$IMAGE_TAG" >> $BASH_ENV
      
#       - run:
#           name: Debug file paths and working directory
#           command: |
#             # Print working directory and list files
#             echo "Current working directory: $(pwd)"
#             echo "Listing all files in current directory:"
#             ls -la
            
#             # Check if the files exist and print their paths
#             find . -name "deployment.yaml" -o -name "service.yaml"
            
#             # Source environment and check if the files exist in the expected location
#             source $BASH_ENV
#             if [ -f "deployment.yaml" ]; then
#               echo "deployment.yaml found in $(pwd)"
#             else
#               echo "deployment.yaml not found in current directory"
#             fi
            
#             if [ -f "service.yaml" ]; then
#               echo "service.yaml found in $(pwd)"
#             else
#               echo "service.yaml not found in current directory"
#             fi
            
#       - run:
#           name: Deploy to EKS
#           command: |
#             source $BASH_ENV
#             kubectl config current-context
            
#             # Find deployment files - check current and root directory
#             DEPLOY_FILE=$(find . -name "deployment.yaml" | head -1)
#             SERVICE_FILE=$(find . -name "service.yaml" | head -1)
            
#             if [ -z "$DEPLOY_FILE" ]; then
#               echo "ERROR: deployment.yaml not found in repository"
#               exit 1
#             fi
            
#             if [ -z "$SERVICE_FILE" ]; then
#               echo "ERROR: service.yaml not found in repository"
#               exit 1
#             fi
            
#             echo "Using deployment file: $DEPLOY_FILE"
#             echo "Using service file: $SERVICE_FILE"
            
#             # Replace IMAGE_TAG and apply
#             cat "$DEPLOY_FILE" | sed "s|\${IMAGE_TAG}|$IMAGE_TAG|g" > deployment_with_tag.yaml
            
#             # Test Kubernetes authentication
#             echo "Testing Kubernetes authentication..."
#             kubectl auth can-i get deployments --namespace=default || {
#               echo "ERROR: Kubernetes authentication failed"
#               echo "Attempting to use aws-iam-authenticator directly..."
#               aws-iam-authenticator token -i $EKS_CLUSTER_NAME --region $AWS_REGION
#               exit 1
#             }
            
#             # Apply with increased verbosity for debugging
#             kubectl apply -f deployment_with_tag.yaml --v=5
#             kubectl apply -f "$SERVICE_FILE" --v=5

# workflows:
#   version: 2
#   deploy-pipeline:
#     jobs:
#       - build
#       - push-to-ecr:
#           requires:
#             - build
#       - deploy-to-eks:
#           requires:
#             - push-to-ecr
#///////////////////////////////////////////////////////////////////////////
# version: 2.1

# executors:
#   linux-self-hosted:
#     machine:
#       enabled: true
#     resource_class: virus/windows 

# jobs:
#   build:
#     executor: linux-self-hosted
#     steps:
#       - checkout
#       - run:
#           name: Build Docker Image
#           command: |
#             docker build -t $ECR_REPOSITORY:latest .

#   push-to-ecr:
#     executor: linux-self-hosted
#     steps:
#       - checkout
#       - run:
#           name: Authenticate with ECR
#           command: |
#             aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
#       - run:
#           name: Build, Tag, and Push Docker Image to ECR
#           command: |
#             IMAGE_TAG="v1.0.${CIRCLE_BUILD_NUM}"
#             echo "export IMAGE_TAG=$IMAGE_TAG" >> $BASH_ENV
#             docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
#             docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#             docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

#   deploy-to-eks:
#     executor: linux-self-hosted
#     steps:
#       - checkout
#       - run:
#           name: Install kubectl if not available
#           command: |
#             if ! command -v kubectl &> /dev/null; then
#               echo "Installing kubectl..."
#               VERSION=$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)
#               curl -LO https://dl.k8s.io/release/${VERSION}/bin/linux/amd64/kubectl
#               chmod +x kubectl
#               mkdir -p $HOME/bin
#               mv kubectl $HOME/bin/kubectl
#               echo 'export PATH=$HOME/bin:$PATH' >> $BASH_ENV
#             else
#               echo "kubectl already installed"
#             fi
#       - run:
#           name: Load env + Set up kubeconfig
#           shell: /bin/bash -leo pipefail
#           command: |
#             if [ -f "$BASH_ENV" ]; then
#               source $BASH_ENV
#             fi
#             aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER_NAME
#       - run:
#           name: Export IMAGE_TAG for deployment
#           command: |
#             IMAGE_TAG="v1.0.${CIRCLE_BUILD_NUM}"
#             echo "export IMAGE_TAG=$IMAGE_TAG" >> $BASH_ENV
#       - run:
#           name: Check Kubernetes manifests exist
#           command: |
#             source $BASH_ENV
#             echo "Checking for deployment.yaml and service.yaml in root directory..."
#             ls -la
#             test -f deployment.yaml || (echo "Error: deployment.yaml not found" && exit 1)
#             test -f service.yaml || (echo "Error: service.yaml not found" && exit 1)
#       - run:
#           name: Deploy to EKS
#           command: |
#             source $BASH_ENV
#             kubectl config current-context
#             kubectl auth can-i get deployments --namespace=default
#             envsubst < deployment.yaml | kubectl apply -f -
#             kubectl apply -f service.yaml

# workflows:
#   version: 2
#   deploy-pipeline:
#     jobs:
#       - build
#       - push-to-ecr:
#           requires:
#             - build
#       - deploy-to-eks:
#           requires:
#             - push-to-ecr




# version: 2.1

# executors:
#   linux-self-hosted:
#     machine:
#       enabled: true
#     resource_class: virus/windows

# jobs:
#   build:
#     executor: linux-self-hosted
#     steps:
#       - checkout
#       - run:
#           name: Build Docker Image
#           command: |
#             docker build -t hello-world-express .

#   push-to-ecr:
#     executor: linux-self-hosted
#     steps:
#       - checkout
#       - run:
#           name: Check AWS CLI and Docker Versions
#           command: |
#             aws --version
#             docker --version
#       - run:
#           name: Authenticate with ECR
#           command: |
#             aws ecr get-login-password --region $AWS_REGION | \
#               docker login --username AWS --password-stdin $ECR_REGISTRY
#       - run:
#           name: Build, Tag, and Push Docker Image to ECR
#           command: |
#             IMAGE_TAG="v1.0.${CIRCLE_BUILD_NUM}"
#             echo "Using image tag: $IMAGE_TAG"

#             docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
#             docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

#             docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

# workflows:
#   version: 2

#   ecr-deploy:
#     jobs:
#       - build
#       - push-to-ecr:
#           requires:
#             - build