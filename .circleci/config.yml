version: 2.1
executors:
  linux-self-hosted:
    machine:
      enabled: true
    resource_class: virus/windows
jobs:
  build:
    executor: linux-self-hosted
    steps:
      - checkout
      - run:
          name: Build Docker Image
          command: |
            docker build -t $ECR_REPOSITORY:latest .
  push-to-ecr:
    executor: linux-self-hosted
    steps:
      - checkout
      - run:
          name: Authenticate with ECR
          command: |
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
      - run:
          name: Build, Tag, and Push Docker Image to ECR
          command: |
            IMAGE_TAG="v1.0.${CIRCLE_BUILD_NUM}"
            echo "export IMAGE_TAG=$IMAGE_TAG" >> $BASH_ENV
            docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
            docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  deploy-to-eks:
    executor: linux-self-hosted
    steps:
      - checkout
      - run:
          name: Install kubectl if not available
          command: |
            if ! command -v kubectl &> /dev/null; then
              echo "Installing kubectl..."
              VERSION=$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)
              curl -LO https://dl.k8s.io/release/${VERSION}/bin/linux/amd64/kubectl
              chmod +x kubectl
              mkdir -p $HOME/bin
              mv kubectl $HOME/bin/kubectl
              echo 'export PATH=$HOME/bin:$PATH' >> $BASH_ENV
            else
              echo "kubectl already installed"
            fi
      - run:
          name: Load env + Set up kubeconfig
          command: |
            aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER_NAME
      - run:
          name: Export IMAGE_TAG for deployment
          command: |
            IMAGE_TAG="v1.0.${CIRCLE_BUILD_NUM}"
            echo "export IMAGE_TAG=$IMAGE_TAG" >> $BASH_ENV
      - run:
          name: Debug file locations
          command: |
            echo "Current directory:"
            pwd
            echo "Directory contents:"
            ls -la
            echo "Finding all yaml files in repository:"
            find . -name "*.yaml" -o -name "*.yml"
      - run:
          name: Deploy to EKS
          command: |
            source $BASH_ENV
            echo "Using these Kubernetes manifest files:"
            if [ -f "./deployment.yaml" ]; then
              echo "Found deployment.yaml"
            else
              echo "WARNING: deployment.yaml not found in current directory"
              DEPLOY_FILE=$(find . -name "deployment.yaml" | head -n 1)
              if [ -n "$DEPLOY_FILE" ]; then
                echo "Using $DEPLOY_FILE instead"
                cp $DEPLOY_FILE ./deployment.yaml
              else
                echo "Error: No deployment.yaml found in repository!"
                exit 1
              fi
            fi
            if [ -f "./service.yaml" ]; then
              echo "Found service.yaml"
            else
              echo "WARNING: service.yaml not found in current directory"
              SERVICE_FILE=$(find . -name "service.yaml" | head -n 1)
              if [ -n "$SERVICE_FILE" ]; then
                echo "Using $SERVICE_FILE instead"
                cp $SERVICE_FILE ./service.yaml
              else
                echo "Error: No service.yaml found in repository!"
                exit 1
              fi
            fi
            kubectl config current-context
            kubectl auth can-i get deployments --namespace=default
            envsubst < deployment.yaml | kubectl apply -f -
            kubectl apply -f service.yaml
workflows:
  version: 2
  deploy-pipeline:
    jobs:
      - build
      - push-to-ecr:
          requires:
            - build
      - deploy-to-eks:
          requires:
            - push-to-ecr
